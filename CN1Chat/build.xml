<?xml version="1.0" encoding="UTF-8"?>
    <!--build_version=5.4-->
    <!-- 
    This build script was generated by Codename One to build native mobile applications using Java.
    To learn more about Codename One go to https://www.codenameone.com/
    -->
        
    <project name="CN1Chat" default="default" basedir=".">
    <description>Builds, tests, and runs the project CN1Chat.</description>
    <import file="nbproject/build-impl.xml"/>
    <property file="codenameone_settings.properties"/>
    <property name="automated" value="false" />
    <taskdef name="codeNameOne" classname="com.codename1.build.client.CodeNameOneBuildTask" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="prepareTests" classname="com.codename1.build.client.PrepareTestsTask" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="installLibs" classname="com.codename1.build.client.InstallLibsTask" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="verifyDir" classname="com.codename1.build.client.VerifyDir" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="generateGuiSources" classname="com.codename1.build.client.GenerateGuiSources" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="initOfflineBuilder" classname="com.codename1.build.client.InitOfflineBuilder" classpath="CodeNameOneBuildClient.jar"/>

    <target depends="init,compile,jar" name="compile-test">
        <mkdir dir="${build.test.classes.dir}" />
        <mkdir dir="${test.src.dir}" />
        <javac destdir="${build.test.classes.dir}"
            encoding="${source.encoding}"
            source="1.8"
            target="1.8"
            bootclasspath="CLDC11.jar" excludes="${excludes}"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${test.src.dir}"/>
        </javac>        
        <prepareTests classesDir="${build.classes.dir}" testClassesDir="${build.test.classes.dir}" seJar="JavaSE.jar" metaDataFile="${build.test.classes.dir}/tests.dat" />
        <jar jarfile="dist/unitTests.jar">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${build.test.classes.dir}"/>
            <fileset dir="lib/impl/cls"/>
        </jar>
    </target>

    <target depends="compile-test" name="-do-test-run">        
        <echo>Updating unitTests.jar with native files</echo>
        <jar destfile="dist/unitTests.jar" update="true">
            <fileset dir="native/internal_tmp"/>
        </jar>
        
        <!-- JavaSE.jar is added here since the test execution might fail otherwise for a pre-existing project -->
        <java classpath="dist/unitTests.jar:${javac.test.classpath}:${file.reference.JavaSE.jar}:native/internal_tmp" classname="com.codename1.impl.javase.TestRunner" fork="true">
            <arg value="${codename1.packageName}.${codename1.mainName}" />
        </java>
    </target>
    
    <target depends="-do-test-run" description="Run unit tests." name="test"/>

    <target name="-pre-compile" depends="-cn1-compile-css">
        <echo>Compile is forcing compliance to the supported API's/features for maximum device compatibility. This allows smaller
        code size and wider device support</echo>
        <mkdir dir="build/tmp"/>
        <javac destdir="build/tmp"
            encoding="${source.encoding}"
            source="1.8"
            target="1.8"
            bootclasspath="lib/CLDC11.jar" excludes="${excludes}"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${src.dir}"/>
        </javac>        
    </target>

    <target name="-post-compile">
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/package-info.class"/>
        </delete>
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/package-info.class"/>
        </delete>
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/Thumbs.db"/>
        </delete>
    </target>

    <target name="build-for-ios-device" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="iphone"
            certificate="${codename1.ios.debug.certificate}"
            certPassword="${codename1.ios.debug.certificatePassword}"
            provisioningProfile="${codename1.ios.debug.provision}"
            appid="${codename1.ios.appid}"
            automated="${automated}"
            />
    </target>

    <target name="offline-builder-ios-debug" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <initOfflineBuilder />
        <java jar="${selectedOfflineBuilder}">
            <arg value="ios" />
            <arg file="codenameone_settings.properties" />
            <arg file="${dist.jar}" />
        </java>
    </target>

    <target name="offline-builder-ios-release" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <initOfflineBuilder />
        <java jar="${selectedOfflineBuilder}">
            <arg value="ios-release" />
            <arg file="codenameone_settings.properties" />
            <arg file="${dist.jar}" />
        </java>
    </target>

    <target name="offline-builder-android" depends="clean,copy-android-override,copy-libs,jar,clean-override">
        <initOfflineBuilder />
        <java jar="${selectedOfflineBuilder}">
            <arg value="and" />
            <arg file="codenameone_settings.properties" />
            <arg file="${dist.jar}" />
            <arg file="gradlePath" />
        </java>
    </target>

    <target name="test-for-ios-device" depends="clean,copy-ios-override,copy-libs,compile-test,clean-override">
        <codeNameOne 
            jarFile="dist/unitTests.jar"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            buildArgs="build.unitTest=1"
            targetType="iphone"
            certificate="${codename1.ios.debug.certificate}"
            certPassword="${codename1.ios.debug.certificatePassword}"
            provisioningProfile="${codename1.ios.debug.provision}"
            appid="${codename1.ios.appid}"
            automated="${automated}"
            />
    </target>

    <target name="test-for-android-device" depends="clean,copy-android-override,copy-libs,compile-test,clean-override">
        <codeNameOne 
            jarFile="dist/unitTests.jar"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            buildArgs="build.unitTest=1"
            targetType="android"
            keystoreAlias="${codename1.android.keystoreAlias}"
            keystore="${codename1.android.keystore}"
            certPassword="${codename1.android.keystorePassword}"
            automated="${automated}"
            />
    </target>

    <target name="test-for-rim-device" depends="clean,copy-rim-override,copy-libs,compile-test,clean-override">
        <codeNameOne 
            jarFile="dist/unitTests.jar"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            buildArgs="build.unitTest=1"
            targetType="rim"
            sigtoolDb="${codename1.rim.signtoolDb}"
            certPassword="${codename1.rim.certificatePassword}"
            sigtoolCsk="${codename1.rim.signtoolCsk}"
            automated="${automated}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

     <target name="test-for-j2me-device" depends="clean,j2me-native-theme-init,copy-j2me-native,copy-j2me-override,copy-libs,compile-test,clean-j2me-native,clean-override">
        <codeNameOne
            jarFile="dist/unitTests.jar"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            targetType="me"            
            buildArgs="build.unitTest=1"
            automated="${automated}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

    
    <target name="build-for-ios-device-release" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            appStoreBuild="true"
            production="true"
            targetType="iphone"
            certificate="${codename1.ios.release.certificate}"
            certPassword="${codename1.ios.release.certificatePassword}"
            provisioningProfile="${codename1.ios.release.provision}"
            appid="${codename1.ios.appid}"
            automated="${automated}"
            />
    </target>

    <target name="copy-libs" depends="init">
        <copy todir="${build.classes.dir}">
            <fileset dir="lib/impl/cls" />
        </copy>
    </target>

    <target name="copy-android-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_android.ovr"/>
            <fileset dir="override" includes="**/*_android-phone.ovr"/>
            <fileset dir="override" includes="**/*_android-tab.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
            <fileset dir="override" includes="**/*_tablet.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/android" includes="**/*"/>
            <fileset dir="lib/impl/native/android" includes="**/*"/>
        </copy>
    </target>
    
    <target name="copy-ios-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_ios.ovr"/>
            <fileset dir="override" includes="**/*_iphone.ovr"/>
            <fileset dir="override" includes="**/*_ipad.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
            <fileset dir="override" includes="**/*_tablet.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/ios" includes="**/*"/>
            <fileset dir="lib/impl/native/ios" includes="**/*"/>
        </copy>
    </target>
        
    <target name="copy-javascript-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <mkdir dir="native/javascript" />
        <mkdir dir="lib/impl/native/javascript" />
        <copy todir="${build.classes.dir}">
            <fileset dir="native/javascript" includes="**/*"/>
            <fileset dir="lib/impl/native/javascript" includes="**/*"/>
        </copy>
    </target>
    
    <target name="copy-rim-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_rim.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/rim" includes="**/*"/>
            <fileset dir="lib/impl/native/rim" includes="**/*"/>
        </copy>
    </target>

    <target name="copy-desktop-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <mkdir dir="lib/impl/native/javase" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_tablet.ovr"/>
            <fileset dir="override" includes="**/*_desktop.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/javase" includes="**/*"/>
            <fileset dir="lib/impl/native/javase" includes="**/*"/>
        </copy>
    </target>

    <target name="copy-j2me-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_me.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/j2me" includes="**/*"/>
            <fileset dir="lib/impl/native/j2me" includes="**/*"/>
        </copy>
    </target>

    <target name="clean-override">
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.ovr"/>
            <fileset dir="${build.classes.dir}" includes="**/*.java"/>
            <fileset dir="${build.classes.dir}" includes="**/*.m"/>
            <fileset dir="${build.classes.dir}" includes="**/*.h"/>
        </delete>
    </target>
    
    <target name="build-for-android-device" depends="clean,copy-android-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="debug_android_steve"
            keystoreAlias="${codename1.android.keystoreAlias}"
            keystore="${codename1.android.keystore}"
            certPassword="${codename1.android.keystorePassword}"
            automated="${automated}"
            />
    </target>

    <target name="build-for-javascript" depends="clean,copy-javascript-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="debug_javascript_steve"
            automated="${automated}"
            />
    </target>    
    
    <target name="war" depends="clean,copy-javascript-override,copy-libs,jar,clean-override" description="Create .war file with Javascript build">
        <antcall target="build-for-javascript">
            <param name="automated" value="true"/>
        </antcall>
        <basename property="dist.base" file="${dist.jar}" suffix=".jar"/>
        <property name="dist.war" value="dist/${dist.base}.war"/>
        <mkdir dir="build/result" />
        <unzip src="dist/result.zip" dest="build/result" />
        <first id="first">
            <fileset dir="build/result" includes="*.war"/>
        </first>
        <copy file="${toString:first}" tofile="${dist.war}" overwrite="true"/>
        <delete dir="build/result"/>
        <delete file="dist/result.zip"/>
    </target>
    <target name="check-webapp-runner">
        <echo>Checking Webapp Runner...</echo>
        <available file="${user.home}/.codenameone/webapp-runner.jar" property="webapprunner.present" value="true"/>
        <echo message="Webapp Runner present? : ${webapprunner.present}"/>
    </target>
    <target name="init-webapp-runner" depends="check-webapp-runner" unless="webapprunner.present">
        <mkdir dir="${user.home}/.codenameone"/>
        <get src="https://github.com/codenameone/cn1-binaries/raw/master/javascript/webapp-runner.jar" dest="${user.home}/.codenameone/webapp-runner.jar"/>
    </target>
    <target name="check-war" depends="init">
        <echo>Checking War</echo>
        <basename property="dist.base" file="${dist.jar}" suffix=".jar"/>
        <property name="dist.war" value="dist/${dist.base}.war"/>
        <available file="${dist.war}" property="war.present" value="true"/>
        <echo message="War file present? ${war.present}"/>
    </target>
    <target name="init-war" depends="check-war" unless="war.present">
        <antcall target="war"/>
    </target>
    <target name="run-war" depends="init-war,init-webapp-runner" description="Run as Web App on Localhost using embedded Tomcat">
        <property name="port" value="0"/>
        <java jar="${user.home}/.codenameone/webapp-runner.jar" fork="true" failonerror="true">
            <arg value="${dist.war}"/>
            <arg value="--port"/>
            <arg value="${port}"/>
            <arg value="--open-in-browser"/>
            <arg value="--temp-directory"/>
            <arg value="dist/webapp"/>
        </java>
    </target>
    <target name="build-for-rim-device" depends="clean,copy-rim-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"

            targetType="rim"
            sigtoolDb="${codename1.rim.signtoolDb}"
            certPassword="${codename1.rim.certificatePassword}"
            sigtoolCsk="${codename1.rim.signtoolCsk}"
            automated="${automated}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

    <target name="build-for-mac-os-x-desktop" depends="clean,copy-desktop-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            certificate="${codename1.desktop.mac.certificate}"
            certPassword="${codename1.desktop.mac.certificatePassword}"
            targetType="desktop_macosx"
            automated="${automated}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>
    
    <target name="build-for-windows-desktop" depends="clean,copy-desktop-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"

            targetType="desktop_windows"
            automated="${automated}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

    <target name="build-for-j2me-device" depends="clean,j2me-native-theme-init,copy-j2me-native,copy-j2me-override,copy-libs,jar,clean-j2me-native,clean-override">
        <codeNameOne
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            targetType="me"            
            automated="${automated}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>
      
    <target name="j2me-native-theme-init">
        <available file="${codename1.j2me.nativeTheme}" property="j2me-native-theme.available" />
    </target>
    
    <target name="copy-j2me-native" if="j2me-native-theme.available">
        <copy file="${codename1.j2me.nativeTheme}" tofile="src/nativeJ2METheme.res" />
    </target>

    <target name="clean-j2me-native" if="j2me-native-theme.available">
        <delete file="src/nativeJ2METheme.res" />
    </target>
      
    <target name="-pre-init">
        <property name="application.args" value="${codename1.packageName}.${codename1.mainName}"/>
        <property name="javac.source" value="1.8" />
        <property name="javac.target" value="1.8" />
        <mkdir dir="native/javase" />
        <mkdir dir="native/android" />
        <mkdir dir="native/internal_tmp" />
        <mkdir dir="native/ios" />
        <mkdir dir="native/j2me" />
        <mkdir dir="native/rim" />
        <mkdir dir="native/win" />
        <mkdir dir="native/javascript" />
        <mkdir dir="lib/impl/cls" />
        <mkdir dir="lib/impl/stubs" />
        <mkdir dir="lib/impl/native" />
        <mkdir dir="lib/impl/native/android" />
        <mkdir dir="lib/impl/native/ios" />
        <mkdir dir="lib/impl/native/j2me" />
        <mkdir dir="lib/impl/native/rim" />
        <mkdir dir="lib/impl/native/win" />
        <mkdir dir="lib/impl/native/javascript" />
        <installLibs lib="lib" dest="lib/impl" />
        <generateGuiSources srcDir="src" encoding="UTF-8" guiDir="res/guibuilder"  />
    </target>

    <target name="-post-jar">
        <mkdir dir="native/javase" />
        <mkdir dir="native/internal_tmp" />
        <mkdir dir="lib/impl/native/javase" />
        <javac destdir="native/internal_tmp"
            encoding="${source.encoding}"
            source="1.8"
            target="1.8"
            classpath="${run.classpath}:${build.classes.dir}">
            <src path="native/javase"/>
            <src path="lib/impl/native/javase"/>
        </javac>
        <copy todir="native/internal_tmp">
            <fileset dir="native/javase" excludes="*.java,*.jar"/>
            <fileset dir="lib/impl/native/javase" excludes="*.java,*.jar"/>
        </copy>        
    </target>

    <target name="-post-clean" depends="refresh-libs-impl">
        <delete dir="native/internal_tmp"/>
    </target>

    <target name="refresh-libs" depends="refresh-libs-impl,clean,jar">
    </target>

    <target name="refresh-libs-impl">
        <delete dir="lib/impl" />
        <installLibs lib="lib" dest="lib/impl" />        
    </target>

    <target name="copy-windows-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_win.ovr"/>
            <fileset dir="override" includes="**/*_win-phone.ovr"/>
            <fileset dir="override" includes="**/*_win-tab.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
            <fileset dir="override" includes="**/*_tablet.ovr"/>
        </copy>
        <mkdir dir="native/win" />
        <copy todir="${build.classes.dir}">
            <fileset dir="native/win" includes="**/*"/>
            <fileset dir="lib/impl/native/win" includes="**/*"/>
        </copy>
    </target>

    <target name="build-for-win-device" depends="clean,copy-windows-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="win"
            automated="${automated}"
            />
    </target>
                
    <target name="build-for-windows-device" depends="clean,copy-windows-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            certificate="${codename1.windows.certificate}"
            certPassword="${codename1.windows.certificatePassword}"

            targetType="windows"
            automated="${automated}"
            />
    </target>
                
    <target name="webservice-wizard">
        <java classpath="CodeNameOneBuildClient.jar" classname="com.codename1.ws.wizard.WSWizard" dir="." fork="true" />
    </target>
    
    <target name="-cn1-compile-css" if="codename1.cssTheme">
        <java jar="${user.home}/.codenameone/designer_1.jar" fork="true" failonerror="true">
            <jvmarg value="-Dcli=true"/>
            <arg value="-css"/>
            <arg file="css/theme.css"/>
            <arg file="src/theme.res"/>
        </java>
    </target>
    
    <target name="add-cn1libs" description="Add the CN1libs to the project">
        <!-- While developing we just reference the CodeRAD and RADChatRoom projects directly.  But when building for device
                we need to use the cn1libs. Run this before building for device,
                and remember to comment ouf the project dependencies from nbproject/project.properties. -->
        <copy file="../dist/RADChatRoom.cn1lib" tofile="lib/RADChatRoom.cn1lib"/>
        <copy file="../../CodeRAD/dist/CodeRAD.cn1lib" tofile="lib/CodeRAD.cn1lib"/>
        <antcall target="refresh-libs-impl"/>
    </target>
    <target name="remove-cn1libs" description="Remove CN1libs from the project">
        <!-- Remove CodeRAD and RADChatRoom cn1libs from libs directory so that we can develop using
                the project references directly.  Remember to uncomment the project dependencies
                        in the classpath in nbproject/project.properties -->
        <delete file="lib/RADChatRoom.cn1lib"/>
        <delete file="lib/CodeRAD.cn1lib"/>
        <antcall target="refresh-libs-impl"/>
    </target>

    <target name="pre-javadoc">
        <property value="JavaSE.jar:lib/CLDC11.jar:lib/lib/impl/cls" name="javac.classpath"/>        
    </target>
    <target depends="pre-javadoc,init,-javadoc-build,-javadoc-browse" description="Build Javadoc." name="javadoc"/>
</project>
